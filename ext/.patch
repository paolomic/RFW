Index: src/Common/robot.cpp
===================================================================
--- src/Common/robot.cpp	(nonexistent)
+++ src/Common/robot.cpp	(working copy)
@@ -0,0 +1,124 @@
+#include "stdafx.h"
+#include <ctime>
+#include <assert.h>
+#include <fstream>
+#include <playsoundapi.h>
+#include "DTHash.h"
+#include "winsock.h"
+#include "MMPrefsImpl.h"
+
+#include "FTCStyles.h"
+
+
+#include "Util.h"
+#include "robot.h"
+#include "MetaMarket.h"
+
+// ROBOT FRAMEWORK  -- Invoke Keyword
+#include <WinSock2.h>
+#include <WS2tcpip.h>
+
+#define ROBOT_SIGNATURE				55555		// check
+#define ROBOT_PORT					63888		// check
+#define ROBOT_MAX_BUFFER_SIZE		4096		// check
+
+
+SOCKET RobotCommunication::CreateClientSocket(int port)
+{
+	WSADATA wsaData;
+	if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
+		return INVALID_SOCKET;
+	}
+
+	SOCKET clientSocket = socket(AF_INET, SOCK_STREAM, 0);
+	if (clientSocket == INVALID_SOCKET) {
+		WSACleanup();
+		return INVALID_SOCKET;
+	}
+
+	return clientSocket;
+}
+
+bool RobotCommunication::ConnectSocket(SOCKET socket, int port)
+{
+	sockaddr_in server;
+	server.sin_family = AF_INET;
+	server.sin_addr.s_addr = inet_addr("127.0.0.1");
+	server.sin_port = htons(port);
+
+	return connect(socket, (struct sockaddr*)&server, sizeof(server)) != SOCKET_ERROR;
+}
+
+int RobotCommunication::ParseKeyword(WPARAM wParam, LPARAM lParam, int& command, int &reply_port, CString& strInput)
+{
+	strInput = "";
+	command = 0;
+	reply_port = 0;
+	
+	PCOPYDATASTRUCT pCDS = (PCOPYDATASTRUCT)lParam;
+	if (!pCDS)
+		return 0;
+
+	int signature = HIWORD(wParam);
+	reply_port = LOWORD(wParam);
+
+	// I dati sono nel nostro spazio di memoria
+	char* buffer = (char*)pCDS->lpData;
+	int dataSize = pCDS->cbData;
+	command = (int)pCDS->dwData;
+
+	if (signature != ROBOT_SIGNATURE
+		|| reply_port != ROBOT_PORT
+		|| command < ROBOT_CMD_BASE
+		|| command > ROBOT_CMD_BASE + 100)					// Check Sender
+	{
+		ASSERT(0);
+		return -1;
+	}
+
+	// 6. Copia sicura dei dati
+	if (pCDS->cbData > 0) {
+		try {
+			std::vector<char> buffer(pCDS->cbData + 1, 0);
+			memcpy_s(buffer.data(), pCDS->cbData, pCDS->lpData, pCDS->cbData);
+			strInput = buffer.data();
+		}
+		catch (...) {
+			TRACE("ERROR: Data copy failed\n");
+			return -1;
+		}
+	}
+
+	return 1;
+}
+
+
+int RobotCommunication::ReplyKeyword(int result, int reply_port, const CString& strOutput)
+{
+	SOCKET clientSocket = CreateClientSocket(reply_port);
+	if (clientSocket == INVALID_SOCKET) {
+		return 0;
+	}
+
+	//CString msg;
+	//msg.Format("### ROBOT-REPLY ### [%s]", strOutput);
+	//g_pMetaMarket->Trace(2, msg);
+
+	int success = 0;
+
+	try {
+		if (ConnectSocket(clientSocket, reply_port)) {
+			CStringA utf8String(strOutput.GetString());
+			if (send(clientSocket, utf8String.GetString(), utf8String.GetLength(), 0) != SOCKET_ERROR) {
+				success = 1;
+			}
+		}
+	}
+	catch (...) {
+		success = 0;
+	}
+
+	closesocket(clientSocket);
+	WSACleanup();
+	return success;
+}
Index: src/Common/robot.h
===================================================================
--- src/Common/robot.h	(nonexistent)
+++ src/Common/robot.h	(working copy)
@@ -0,0 +1,23 @@
+#pragma once
+
+
+// ROBOT FRAMEWORK  -- Invoke Keyword
+
+// Keyword Command
+#define ROBOT_CMD_BASE				22220
+#define ROBOT_CMD_GET_HEADER		ROBOT_CMD_BASE + 0
+#define ROBOT_CMD_GET_PROP			ROBOT_CMD_BASE + 1
+#define ROBOT_CMD_IS_COL_VISIBLE	ROBOT_CMD_BASE + 2
+#define ROBOT_CMD_GET_COL_POINT		ROBOT_CMD_BASE + 3
+
+class RobotCommunication {
+public:
+	static int ParseKeyword(WPARAM wParam, LPARAM lParam, int& command, int& reply_port, CString& strInput);
+	static int ReplyKeyword(int result, int reply_port, const CString& strOutput);
+
+private:
+	static SOCKET CreateClientSocket(int port);
+	static bool ConnectSocket(SOCKET socket, int port);
+};
+
+
Index: src/Common/util.cpp
===================================================================
--- src/Common/util.cpp	(revision 11679)
+++ src/Common/util.cpp	(working copy)
@@ -1744,17 +1744,17 @@
 	return lvalue == FTCX_CTX_TRUE;
 }
 
-int LoadListFromPipedString(CStringList* strList, CString &str)
+int LoadListFromPipedString(CStringList* strList, CString &str, LPCTSTR sep /*= "|"*/)
 {
 	CString strOrderID;
 	CString strToken;
 	int nCurPos = 0;
 	int nSortPos = 1;	// must start from 1
-	strToken = str.Tokenize("|", nCurPos);
+	strToken = str.Tokenize(sep, nCurPos);
 	while (!strToken.IsEmpty())
 	{
 		strOrderID = strToken;
-		strToken = str.Tokenize("|", nCurPos);
+		strToken = str.Tokenize(sep, nCurPos);
 		strList->AddTail(strOrderID);
 	}
 
@@ -1761,6 +1761,19 @@
 	return strList->GetCount();
 }
 
+int LoadPipedStringFromString(CString& strOutput, CStringList* List_out, LPCTSTR sep /*= "|"*/)
+{
+	strOutput = "";
+
+	for (POSITION pos = List_out->GetHeadPosition(); pos != NULL; )
+	{
+		CString item = List_out->GetNext(pos);
+		strOutput = strOutput + (strOutput.IsEmpty()? "" : sep) + item;
+	}
+
+	return List_out->GetCount();
+}
+
 int LoadListFromContext(LPCTSTR strKey, CStringList* pstrList, CFTCXContext* pContext)
 {
 	CString strValue;
Index: src/Common/util.h
===================================================================
--- src/Common/util.h	(revision 11679)
+++ src/Common/util.h	(working copy)
@@ -227,7 +227,9 @@
 	return false;
 }
 
-int LoadListFromPipedString( CStringList* strList, CString &str);
+int LoadListFromPipedString( CStringList* strList, CString &str, LPCTSTR sep = "|");
+int LoadPipedStringFromString(CString &strOutput, CStringList *List_out, LPCTSTR sep="|");
+
 int LoadListFromContext(LPCTSTR strKey, CStringList* strList, CFTCXContext* pContext);
 
 BOOL ClientBelongsToOperator(LPCTSTR strOperator, LPCTSTR strClientID);
Index: src/Views/MMSBPaneSecurityView.cpp
===================================================================
--- src/Views/MMSBPaneSecurityView.cpp	(revision 11679)
+++ src/Views/MMSBPaneSecurityView.cpp	(working copy)
@@ -739,6 +739,25 @@
 
 BOOL CMMSBPaneSecurityView::OnRButtonClickedRowCol(ROWCOL nRow, ROWCOL nCol, UINT nFlags, CPoint pt)
 {
+#ifdef DEBUG
+	if (nCol == 0 && nRow < GetFirstDataRow())
+	{
+		CStringList List_in, List_out;
+		CString strOutput;
+
+		//GetProperties(&List_in, &List_out);
+		//LoadPipedStringFromString(strOutput, &List_out, "; ");
+		//TRACE("###PROPERTY: %s \n", strOutput);
+
+		List_in.RemoveAll(); List_out.RemoveAll();
+		GetHeader(&List_in, &List_out);
+		LoadPipedStringFromString(strOutput, &List_out, "; ");
+		TRACE("###HEADER: %s \n", strOutput);
+
+		return TRUE;
+	}
+#endif // DEBUG
+	
 	return CMMSecurityView::OnRButtonClickedRowCol(nRow, nCol, nFlags, pt);
 }
 
Index: src/Views/MMTradingOrderView.cpp
===================================================================
--- src/Views/MMTradingOrderView.cpp	(revision 11679)
+++ src/Views/MMTradingOrderView.cpp	(working copy)
@@ -1807,39 +1807,35 @@
 
 BOOL CMMTradingOrderView::CanSortCol(ROWCOL nCol, long* pCurSorOrder /*= NULL*/)
 {
-	CLSkField*		pField;
-	long			fieldID;
+	CLSkField*		pField = nullptr;
+	long			fieldID = 0;
 	BOOL			bCanSort = FALSE;
 
-	if(GetFieldByCol(nCol,&pField,&fieldID)) 
+	if (GetFieldByCol(nCol, &pField, &fieldID) && pField && pField->mOffset) 
 	{
-		if(pField && pField->mOffset) 
+		switch (pField->mOffset) 
 		{
-			switch (pField->mOffset) 
-			{
-				case FOFFS(CLIENT_ORDER,CareOrder):
-				case FOFFS(CLIENT_ORDER,RejectionTime):
-					// not sortable column
-				break;
-				default:
-					bCanSort = TRUE;
-					if (pCurSorOrder)
-						*pCurSorOrder = GetSheetData()->IsOrderedOnField(pField->mOffset);
-				break;
-			}
+		case FOFFS(CLIENT_ORDER,CareOrder):
+		case FOFFS(CLIENT_ORDER,RejectionTime):
+			// not sortable column
+		break;
+		default:
+			bCanSort = TRUE;
+			if (pCurSorOrder)
+				*pCurSorOrder = GetSheetData()->IsOrderedOnField(pField->mOffset);
+		break;
+		}
 
-		}
 	}
 
 	return bCanSort;
-
 }
 
 void CMMTradingOrderView::OnSheetSortColAsc()
 {
 	CRowColArray	awCols;
-	CLSkField*		pField;
-	long			fieldID;
+	CLSkField*		pField = nullptr;
+	long			fieldID = 0;
 
 	BOOL bReorder = FALSE;
 
@@ -1881,8 +1877,8 @@
 void CMMTradingOrderView::OnSheetSortColDesc()
 {
 	CRowColArray	awCols;
-	CLSkField*		pField;
-	long			fieldID;
+	CLSkField*		pField = nullptr;
+	long			fieldID = 0;
 	BOOL bReorder = FALSE;
 
 	if(GetSelectedCols(awCols))
@@ -4822,8 +4818,8 @@
 	if (nRow<GetFirstDataRow())
 		return CMMSheetView::OnLButtonClickedRowCol(nRow, nCol, nFlags, pt);
 
-	CLSkField *hField;
-	long mID;
+	CLSkField *hField = nullptr;
+	long mID = 0;
 	GetFieldByCol(nCol, &hField, &mID);
 	if (mID == MM_ORDER_DELETE_FID)
 	{
@@ -4925,8 +4921,8 @@
 	if (nRow<GetFirstDataRow())
 		return CMMSheetView::OnLButtonDblClkRowCol(nRow, nCol, nFlags, pt);
 
-	CLSkField*		pField;
-	long	fieldID;
+	CLSkField*		pField = nullptr;
+	long	fieldID = 0;
 	BOOL bEditable = FALSE;
 	
 	if (GetFieldByCol(nCol,&pField,&fieldID)) 
@@ -5046,10 +5042,36 @@
 	return bIsEnabled;
 }
 
+int CMMTradingOrderView::__TEST(ROWCOL nRow, ROWCOL nCol, UINT nFlags, CPoint pt)
+{
+	CStringList List_in, List_out;
+	CString strOutput;
+
+	GetProperties(&List_in, &List_out);
+	LoadPipedStringFromString(strOutput, &List_out, "; ");
+	TRACE("###PROPERTY: %s \n", strOutput);
+
+	List_in.RemoveAll(); List_out.RemoveAll();
+	GetHeader(&List_in, &List_out);
+	LoadPipedStringFromString(strOutput, &List_out, "; ");
+	TRACE("###HEADER: %s \n", strOutput);
+	
+	return TRUE;
+}
+
 BOOL CMMTradingOrderView::OnRButtonClickedRowCol(ROWCOL nRow, ROWCOL nCol, UINT nFlags, CPoint pt)
 {
 	if (nRow < GetFirstDataRow())
+	{
+#ifdef DEBUG
+		if (nCol == 0) 
+		{
+			return __TEST(nRow, nCol, nFlags, pt);
+		}
+#endif // DEBUG
 		return CMMSheetView::OnRButtonClickedRowCol(nRow, nCol, nFlags, pt);
+	}
+		
 
 	// check tick selector settins
 	if (GetRowValues(nRow, &m_client_order))
@@ -6021,7 +6043,7 @@
 	{
 		CRowColArray		awCols;
 		CLSkField*			hField = NULL;
-		long				mID;
+		long				mID = 0;
 		ROWCOL				nCount;
 		UINT				fGray = MF_GRAYED;
 
@@ -6372,8 +6394,8 @@
 
 	BOOL bRet = FALSE;
 
-	CLSkField*		pField;
-	long			fieldID;
+	CLSkField* pField = nullptr;
+	long	fieldID;
 
 	if (GetFieldByCol(nCol,&pField,&fieldID) && pField) 
 	{
@@ -10297,8 +10319,8 @@
 		return TRUE;
 
 	ROWCOL nRow, nCol;
-	CLSkField*		pField;
-	long			fieldID;
+	CLSkField*		pField = nullptr;
+	long			fieldID = 0;
 	double nVal;
 
 	GetCurrentCell(nRow, nCol);
@@ -10440,8 +10462,8 @@
 
 	CLFWSheetData* pSheetData = GetSheetData();
 
-	CLSkField*		pField;
-	long			fieldID;
+	CLSkField*		pField = nullptr;
+	long			fieldID = 0;
 
 	BOOL bRet = FALSE;
 
@@ -10450,8 +10472,8 @@
 	{
 		if (pField)
 		{
-			if (pField->mType == TypeNONE && pField->mOffset == FOFFS(CLIENT_ORDER, OrderType)) {
-
+			if (pField->mType == TypeNONE && pField->mOffset == FOFFS(CLIENT_ORDER, OrderType))
+			{
 				char		*FieldPntr = (char *)&m_pObj->GetBA()[pField->mOffset];
 
 				if (((CLSkeletonObj *)FieldPntr)->mDType == EnumType)
Index: src/Views/MMTradingOrderView.h
===================================================================
--- src/Views/MMTradingOrderView.h	(revision 11679)
+++ src/Views/MMTradingOrderView.h	(working copy)
@@ -609,6 +609,8 @@
 	BOOL IsSettlementDateMenuVisible(CLIENT_ORDER* pclient_order);
 	BOOL IsEditSettlementDateEnabled(CLIENT_ORDER* pclient_order);
 
+	int __TEST(ROWCOL nRow, ROWCOL nCol, UINT nFlags, CPoint pt);
+
 protected:
 	CMMMrkInfoImpl				m_capOddLotQtyDecimals;
 	CMMMrkInfoImpl				m_capOrderLock;
Index: src/Views/MMView.cpp
===================================================================
--- src/Views/MMView.cpp	(revision 11679)
+++ src/Views/MMView.cpp	(working copy)
@@ -14,6 +14,7 @@
 #include "VersionDefs.h"
 
 #include "FTCXStorageNodePath.h"
+#include "robot.h"
 
 #ifdef _DEBUG
 #undef THIS_FILE
@@ -190,7 +191,7 @@
 	// Lock scroll when scrollbar are not visible (view m_bDisableScrollWhenScrollbarsAreHidden)
 	ON_COMMAND(ID_SHEET_SHOWHIDE_SCROLLBARS, OnShowHideScrollBar)
 
-
+	ON_MESSAGE(WM_COPYDATA, OnCopyData)				// Robot
   //}}AFX_MSG_MAP
 
 END_MESSAGE_MAP()
@@ -397,8 +398,71 @@
 
 	if (m_pViewProxy && m_pViewProxy->GetVersion()>=0x0110)
 		m_pViewProxy->OnEnableAutoApplyColFilters(m_bAutoApplyColFilter);
+
+	Set_UIA_Attr();
 }
 
+// TEST UIA TEST UIA TEST UIA TEST UIA TEST UIA TEST UIA
+
+
+void CMMSheetView::Set_UIA_Attr()
+{
+	SetWindowText("StingrayGrid");			// robot: set UIA Name
+}
+
+// UIA Access - Non va
+
+//#include <oleacc.h>
+//#include <UIAutomation.h>
+//#include <UIAutomationCore.h>
+//#include <UIAutomationClient.h>
+//
+//#pragma comment(lib, "oleacc.lib")
+//#pragma comment(lib, "UIAutomationCore.lib")
+//
+//void CMMSheetView::Set_UIA_Attr()
+//{
+//	// Per il Name usando IAccessible
+//	VARIANT varChild;
+//	varChild.vt = VT_I4;
+//	varChild.lVal = CHILDID_SELF;
+//	BSTR bstrName = SysAllocString(L"MyCustomGridName");
+//
+//	IAccessible* pAcc = NULL;
+//	if (SUCCEEDED(AccessibleObjectFromWindow(m_hWnd, OBJID_CLIENT,
+//		IID_IAccessible, (void**)&pAcc)))
+//	{
+//		pAcc->put_accName(varChild, bstrName);
+//		pAcc->Release();
+//	}
+//
+//	// Per AutomationId e ControlType usando IRawElementProviderSimple
+//	IRawElementProviderSimple* pProvider = NULL;
+//	if (SUCCEEDED(UiaHostProviderFromHwnd(m_hWnd, &pProvider)))
+//	{
+//		// Impostare AutomationId
+//		VARIANT varAutomationId;
+//		varAutomationId.vt = VT_BSTR;
+//		varAutomationId.bstrVal = SysAllocString(L"CustomGrid_001");
+//		pProvider->SetPropertyValue(UIA_AutomationIdPropertyId, varAutomationId);
+//
+//		// Impostare ControlType
+//		VARIANT varControlType;
+//		varControlType.vt = VT_I4;
+//		varControlType.lVal = UIA_DataGridControlTypeId;
+//		pProvider->SetPropertyValue(UIA_ControlTypePropertyId, varControlType);
+//
+//		// Liberare la memoria
+//		SysFreeString(varAutomationId.bstrVal);
+//		pProvider->Release();
+//	}
+//
+//	// Liberare la memoria
+//	SysFreeString(bstrName);
+//}
+
+
+
 void CMMSheetView::EnablePageBreaks(BOOL bEnable)
 {
 	CGXStyle*	pTableStyle = CreateStyle();
@@ -965,8 +1029,8 @@
 			long lSorted = -2; // none
 			if (CanSortCol(nCol, &lSorted)) 
 			{
-				CLSkField* pField;
-				long fieldID;
+				CLSkField* pField = nullptr;
+				long fieldID = 0;
 				if(GetFieldByCol(nCol,&pField,&fieldID) && pField)
 				{
 					switch (lSorted)
@@ -1049,22 +1113,18 @@
 
 BOOL CMMSheetView::CanSortCol(ROWCOL nCol, long* pCurSorOrder /*= NULL*/)
 {
-	CLSkField*		pField;
-	long			fieldID;
+	CLSkField*		pField = nullptr;
+	long			fieldID = 0;
 	BOOL			bCanSort = FALSE;
 
-	if(GetFieldByCol(nCol,&pField,&fieldID)) 
+	if(GetFieldByCol(nCol, &pField, &fieldID) && pField && pField->mOffset) 
 	{
-		if(pField && pField->mOffset) 
-		{
-			bCanSort = TRUE;
-			if (pCurSorOrder)
-				*pCurSorOrder = GetSheetData()->IsOrderedOnField(pField->mOffset);
-		}
+		bCanSort = TRUE;
+		if (pCurSorOrder)
+			*pCurSorOrder = GetSheetData()->IsOrderedOnField(pField->mOffset);
 	}
 
 	return bCanSort;
-	
 }
 
 void CMMSheetView::OnControlBarAction(CControlBar *pControlBar, long nActionID)
@@ -1342,35 +1402,27 @@
 
 void CMMSheetView::UpdateCell(CLSkeletonObj* pObj,unsigned long nOffset,long nIdx)
 {
-	CLFWSkDocKeyDataCustom	*Key;
-	long					NewPosOrd;
-	long 					ret;
-	CLSkField*	mField;
-	long		mID;
+	CLSkField*	mField = nullptr;
+	long		mID = 0;
 
-
-	for(int nCol=0;nCol<=GetColCount();nCol++)
+	for(int nCol = 0; nCol <= GetColCount(); nCol++)
 	{
 		mField = NULL;
 		mID = 0;
-
-		if (ret=GetFieldByCol(nCol,&mField,&mID))
+		if (GetFieldByCol(nCol,&mField,&mID))
 		{
 			if( (nIdx && mID==nIdx) || (mField && nOffset && mField->mOffset==nOffset) )
 			{
-				Key	= (CLFWSkDocKeyDataCustom *)GetSheetData()->GetKey()->CreateKey(pObj);
-
-				if ( (NewPosOrd=GetSheetData()->GetKey()->GetInsPos(Key))>=0 )
+				CLFWSkDocKeyDataCustom	*Key = (CLFWSkDocKeyDataCustom *)GetSheetData()->GetKey()->CreateKey(pObj);
+				long NewPosOrd = GetSheetData()->GetKey()->GetInsPos(Key);
+				if (NewPosOrd >= 0)
 				{
-					for (int n=0; n<GetSheetData()->GetRowPerEntity();n++)
-						RedrawRowCol(NewPosOrd * GetSheetData()->GetRowPerEntity() + GetFirstDataRow()+n,nCol,GX_UPDATENOW,FALSE);
-				
+					for (int n = 0; n < GetSheetData()->GetRowPerEntity(); n++)
+						RedrawRowCol(NewPosOrd * GetSheetData()->GetRowPerEntity() + GetFirstDataRow() + n, nCol, GX_UPDATENOW, FALSE);
 				}
 				delete Key;
 				break;
 			}
-		} else {
-			ret = 1;
 		}
 	}
 }
@@ -1377,8 +1429,8 @@
 
 void CMMSheetView::UpdateCol(unsigned long nOffset,long nIdx)
 {
-	CLSkField*	mField;
-	long		mID;
+	CLSkField*	mField = nullptr;
+	long		mID = 0;
 
 	for(int nCol=0;nCol<=GetColCount();nCol++)
 	{
@@ -1399,8 +1451,8 @@
 void CMMSheetView::UpdateColStyle()
 {
 	CGXStyle sty;
-	CLSkField* pField;
-	long fieldID;
+	CLSkField* pField = nullptr;
+	long fieldID = 0;
 	BOOL bResizeToFit = FALSE;
 
 	for (ROWCOL col = GetFirstDataCol(); col <= GetLastDataCol(); col++)
@@ -1581,30 +1633,30 @@
 
 void CMMSheetView::OnSheetSortColAsc()
 {
-	CRowColArray	awCols;
-	CLSkField*		pField;
-	long			fieldID;
 	BOOL			bReorder = FALSE;
 
-
+	CRowColArray	awCols;
 	if(GetSelectedCols(awCols))
 	{
+		CLSkField*		pField = nullptr;
+		long			fieldID = 0;
+
 		for(ROWCOL n = 0; n<awCols.GetSize(); n++)
 		{
 			if (CanSortCol(awCols[n], NULL)) 
 			{
-				if(GetFieldByCol(awCols[n],&pField,&fieldID))
+				pField = nullptr;
+				if (GetFieldByCol(awCols[n], &pField, &fieldID) && pField && pField->mOffset)
 				{
-					if(pField && pField->mOffset) {
-						bReorder = TRUE;
-						GetSheetData()->ReorderOnField(pField->mOffset,SkSegAscendent);
-						if (!m_bLoadEnabled)
-							RedrawRowCol(GetHeaderRows(), n, GX_INVALIDATE);
-					}
+					bReorder = TRUE;
+					GetSheetData()->ReorderOnField(pField->mOffset,SkSegAscendent);
+					if (!m_bLoadEnabled)
+						RedrawRowCol(GetHeaderRows(), n, GX_INVALIDATE);
 				}
 			}
 		}
 	}
+
 	if (bReorder)
 	{
 		SetKeySortOnReorder();
@@ -1634,23 +1686,25 @@
 
 void CMMSheetView::OnSheetSortColDesc()
 {
-	CRowColArray	awCols;
-	CLSkField*		pField;
-	long			fieldID;
 	BOOL			bReorder = FALSE;
 
-	if(GetSelectedCols(awCols)) {
-		for(ROWCOL n = 0; n<awCols.GetSize(); n++) 
+	CRowColArray	awCols;
+	if(GetSelectedCols(awCols))
+	{
+		CLSkField*		pField = nullptr;
+		long			fieldID = 0;
+
+		for (ROWCOL n = 0; n<awCols.GetSize(); n++) 
 		{
 			if (CanSortCol(awCols[n], NULL)) 
 			{
-				if(GetFieldByCol(awCols[n],&pField,&fieldID)) {
-					if(pField && pField->mOffset) {
-						bReorder = TRUE;
-						GetSheetData()->ReorderOnField(pField->mOffset,SkSegDescendent);
-						if (!m_bLoadEnabled)
-							RedrawRowCol(GetHeaderRows(), n, GX_INVALIDATE);
-					}
+				pField = nullptr;
+				if (GetFieldByCol(awCols[n], &pField, &fieldID) && pField && pField->mOffset)
+				{
+					bReorder = TRUE;
+					GetSheetData()->ReorderOnField(pField->mOffset,SkSegDescendent);
+					if (!m_bLoadEnabled)
+						RedrawRowCol(GetHeaderRows(), n, GX_INVALIDATE);
 				}
 			}
 		}
@@ -1832,8 +1886,6 @@
 {
 	CRowColArray		awCols;
 	ROWCOL				nCount;
-	CLSkField*			hField = NULL;
-	long				mID = 0;
 
 	nCount = GetSelectedCols(awCols);
 
@@ -1842,13 +1894,19 @@
 		BOOL bOld = LockUpdate();
 
 		CGXStyle*	pStyle = CreateStyle();
+		CLSkField*			hField = NULL;
+		long				mID = 0;
 
-		for (int i =0; i< awCols.GetSize(); i++)
+		for (int i = 0; i < awCols.GetSize(); i++)
 		{
-			GetFieldByCol(awCols[i],&hField,&mID);
-			SetDefaultDecimals(awCols[i], hField, mID, *pStyle);
+			hField = NULL;
+			mID = 0;
+			if (GetFieldByCol(awCols[i], &hField, &mID))
+			{
+				SetDefaultDecimals(awCols[i], hField, mID, *pStyle);
 
-			SetStyleRange(CGXRange().SetCols(awCols[i]), *pStyle);
+				SetStyleRange(CGXRange().SetCols(awCols[i]), *pStyle);
+			}
 		}
 
 		RecycleStyle(pStyle);
@@ -1865,21 +1923,20 @@
 	if (pCmdUI->m_pSubMenu)
 	{
 		CRowColArray		awCols;
-		CLSkField*			hField = NULL;
-		long				mID;
-		ROWCOL				nCount;
 		UINT				fGray = MF_GRAYED;
 
-
-		nCount = GetSelectedCols(awCols);
-		if(nCount)
+		ROWCOL nCount = GetSelectedCols(awCols);
+		if (nCount)
 		{
-			for (int i =0; i< awCols.GetSize(); i++)
+			CLSkField*			hField = NULL;
+			long				mID = 0;
+			for (int i = 0; i < awCols.GetSize(); i++)
 			{
-
-				if (GetFieldByCol(awCols[i],&hField,&mID) && hField)
+				hField = NULL;
+				mID = 0;
+				if (GetFieldByCol(awCols[i], &hField, &mID) && hField)
 				{
-					if (hField->mType==TypeDOUBLE || hField->mType==TypeFLOAT)
+					if (hField->mType == TypeDOUBLE || hField->mType == TypeFLOAT)
 					{
 						fGray = 0;
 						break;
@@ -1889,8 +1946,9 @@
 		}
 
          pCmdUI->m_pMenu->EnableMenuItem(pCmdUI->m_nIndex, MF_BYPOSITION|fGray);
-
-	} else {
+	}
+	else
+	{
 		// default menu
 		pCmdUI->Enable(TRUE);
 	}
@@ -2371,9 +2429,9 @@
 	ROWCOL nRow, nCol;
 	if (GetCurrentCell(nRow, nCol)) 
 	{
-		CLSkField* pField;
-		long fieldID;
-		if(GetFieldByCol(nCol,&pField,&fieldID)) 
+		CLSkField* pField = nullptr;
+		long fieldID = 0;
+		if (GetFieldByCol(nCol, &pField, &fieldID)) 
 		{
 			return (CanStartEditing(nRow, nCol, m_pObj, pField, fieldID) && IsClipboardFormatAvailable(CF_TEXT));
 		}
@@ -2392,9 +2450,10 @@
 	ROWCOL nRow, nCol;
 	if (GetCurrentCell(nRow, nCol))
 	{
-		CLSkField* pField;
-		long fieldID;
-		if(GetFieldByCol(nCol,&pField,&fieldID)) {
+		CLSkField* pField = nullptr;
+		long fieldID = 0;
+		if (GetFieldByCol(nCol,&pField,&fieldID))
+		{
 			return CanStartEditing(nRow, nCol, m_pObj, pField, fieldID);
 		}
 	}
@@ -2432,7 +2491,7 @@
 	unsigned long fieldOffset;
 	char *P = m_pObj->GetBA();
 	CString ddeHeader;
-	CLSkeletonObj *pObj;
+	CLSkeletonObj *pObj = nullptr;
 
 	ddeHeader.Format("=%s|", AfxGetAppName());
 
@@ -2456,21 +2515,24 @@
 		colRight = rect.right;
 	}
 
-	for (ROWCOL row= rowTop; row<=rowBottom; row++)
+	for (ROWCOL row = rowTop; row <=rowBottom; row++)
 	{
 		CLSkField* pField = NULL;
-		long fieldID;
-		BOOL bRet;
+		long fieldID = 0;
+		BOOL bRet = FALSE;
 
 		CMMSheetView::GetRowValues(row, m_pObj);
 
-		for (ROWCOL col = colLeft; col<=colRight; col++)
+		for (ROWCOL col = colLeft; col <= colRight; col++)
 		{
-			if(!IsColHidden(col))
+			if (!IsColHidden(col))
 			{
-				pObj = NULL;
+				pObj = nullptr;
+				pField = nullptr;
+				fieldID = 0;
+				bRet = FALSE;
 
-				if(GetFieldByCol(col,&pField,&fieldID))
+				if (GetFieldByCol(col, &pField, &fieldID))
 				{
 					keyName = "";
 					keyValue = "";
@@ -2482,15 +2544,16 @@
 				{
 					objName = pObj->mName;
 					fieldName[0] = '\0';
-					if (pObj->FieldOffset2Name(fieldName, fieldOffset)>0)
+					if (pObj->FieldOffset2Name(fieldName, fieldOffset) > 0)
 						linkBuff += ddeHeader + objName + "!'" + keyName + "&" + keyValue + "&" + fieldName + "'";
 					else
 						linkBuff += _LS(IDLS_DATA_NOT_LINKABLE);
-				} else
+				}
+				else
 					linkBuff += _LS(IDLS_DATA_NOT_LINKABLE);
 
-				if (col != colRight) linkBuff += "\t";
-
+				if (col != colRight)
+					linkBuff += "\t";
 			}
 		}
 
@@ -2499,7 +2562,6 @@
 
 	string str = linkBuff;
 	m_clipboard.PutData(CF_TEXT,str);
-
 }
 
 void CMMSheetView::OnEditCopyRTD()
@@ -2555,18 +2617,21 @@
 	for (ROWCOL row= rowTop; row<=rowBottom; row++)
 	{
 		CLSkField* pField = NULL;
-		long fieldID;
-		BOOL bRet;
+		long fieldID = 0;
+		BOOL bRet = FALSE;
 
 		CMMSheetView::GetRowValues(row, m_pObj);
 
-		for (ROWCOL col = colLeft; col<=colRight; col++)
+		for (ROWCOL col = colLeft; col <= colRight; col++)
 		{
-			if(!IsColHidden(col))
+			if (!IsColHidden(col))
 			{
-				pObj = NULL;
-				
-				if(GetFieldByCol(col,&pField,&fieldID))
+				pObj = nullptr;
+				pField = nullptr;
+				fieldID = 0;
+				bRet = FALSE;
+
+				if (GetFieldByCol(col,&pField,&fieldID))
 				{
 					keyName = "";
 					keyValue = "";
@@ -2579,14 +2644,16 @@
 				{
 					objName = pObj->mName;
 					fieldName[0] = '\0';
-					if (pObj->FieldOffset2Name(fieldName, fieldOffset)>0)
+					if (pObj->FieldOffset2Name(fieldName, fieldOffset) > 0)
 						linkBuff += rtdHeader + objName + "\"" + charListSep + "\"" + fieldName + "\"" + charListSep + "\"" + keyName + ";" + keyValue + "\")";
 					else
 						linkBuff += _LS(IDLS_DATA_NOT_LINKABLE);
-				} else
+				}
+				else
 					linkBuff += _LS(IDLS_DATA_NOT_LINKABLE);
 
-				if (col != colRight) linkBuff += "\t";
+				if (col != colRight)
+					linkBuff += "\t";
 
 			}
 		}
@@ -2935,7 +3002,302 @@
 	return TRUE;
 }
 
+//////////////////////////////////////////////////////////////////////////
+// Robot Call
+#pragma region
+/*
+	ROBOT COMMANDS
+	=============================
 
+	Note:	'|' means '\t'
+
+	ROBOT_CMD_GET_HEADER:
+	========================
+		''
+		'col1,x1|col2,x2'			x optional for visible only
+
+	ROBOT_CMD_GET_PROP :
+	========================
+		''
+		'x_off=x|y_top=y|y_bot=y|y_mid=y|col_from=c1|col_to=c2'
+
+	ROBOT_CMD_GET_COL_POINT
+	========================
+		'ncol' or 'ncol|scroll'
+		'x_mid|scrolled|x1|x2'		
+
+	ROBOT_CMD_IS_COL_VISIBLE :
+	========================
+		'col'
+		'res'						0 / 1 - si puo usare getpoint
+
+*/
+
+
+#define ROBOT_SEP		"\t"
+
+int CMMSheetView::GetColPos(ROWCOL col, ROWCOL col_first_visible, int &x1, int &x2, int &x_mid)
+{
+	CRect rec = CalcRectFromClientRowCol(GetHeaderRows(), col - col_first_visible + 1);			// Colonna indice dalla prima visibile - Why ???
+	
+	x1 = rec.left;
+	x2 = rec.right;
+	x_mid = (x1 + x2) / 2;
+
+	return 1;
+}
+
+int CMMSheetView::GetColViewRange(ROWCOL& col1, ROWCOL& col2)
+{
+	CRect allrec, leftrec;
+	GetClientRect(&allrec);
+
+	leftrec = allrec;
+	leftrec.right = leftrec.left + 38;
+
+	col1 = CalcRightColFromRect(leftrec);											// left cell - cam be trunc
+	col2 = CalcRightColFromRect(allrec);											// right cell - cam be trunc
+
+	// TODO controllo troncamenti col1 e col2, centro nel grid
+	CRect rec = CalcRectFromClientRowCol(GetHeaderRows(), GetHeaderCols());
+	int x1, x2, xm1, xm2;
+	GetColPos(col1, col1, x1, x2, xm1);
+	GetColPos(col2, col1, x1, x2, xm2);
+
+	if (xm1 < rec.left)
+		col1++;
+
+	if (xm2 > allrec.right)
+		col2--;
+
+	while (IsColHidden(col2))			// TEST - Da implementare 
+		col2--;
+
+	return 0;
+}
+
+// Problema: Non Tornata tutte le colonne a vole si fermava a 13... ?
+//int CMMSheetView::GetHeader(CStringList* List_in, CStringList* List_out)
+//{
+//	ROWCOL col1, col2;
+//	GetColViewRange(col1, col2);
+//
+//	//CMMSheetData* pSheetData = (CMMSheetData*)GetSheetData();
+//	CLFWSheetData* pSheetData = GetSheetData();
+//	CLFWFieldData* pdata;
+//
+//	ROWCOL nCol = 1;
+//	while (pdata = pSheetData->GetFieldByCol(nCol) )
+//
+//	{
+//		CString msg;
+//		msg.Format("### ROBOT-HEDER [%s] Hide[%d]", GetValueRowCol(GetHeaderRows(), nCol), IsColHidden(nCol));
+//		g_pMetaMarket->Trace(2, msg);
+//		
+//		if (!IsColHidden(nCol))
+//		{
+//			CString name = GetValueRowCol(GetHeaderRows(), nCol);
+//
+//			if (nCol >= col1 && nCol <= col2)
+//			{
+//				int x1, x2, xm;
+//				GetColPos(nCol, col1, x1, x2, xm);
+//			
+//				CString position;
+//				//position.Format(",(%d,%d)", x1, p.y);
+//
+//				position.Format(",%d", xm);
+//
+//				name = name + position;
+//			}
+//
+//			List_out->AddTail(name);
+//		}
+//		nCol++;
+//	}
+//
+//	return 0;
+//}
+
+int CMMSheetView::GetHeader(CStringList* List_in, CStringList* List_out)
+{
+	ROWCOL col1, col2;
+	GetColViewRange(col1, col2);
+
+	CLFWSheetData* pSheetData = GetSheetData();
+	CLFWFieldData* pdata;
+
+	int nCol = 0;
+	for (nCol = 1; nCol < pSheetData->m_cacheFieldsSize; nCol++)
+	{
+		TRY
+		{
+			if (!IsColHidden(nCol))
+			{
+				CString name = GetValueRowCol(GetHeaderRows(), nCol);
+
+				if (nCol >= col1 && nCol <= col2)
+				{
+					int x1, x2, xm;
+					GetColPos(nCol, col1, x1, x2, xm);
+					CString position;
+					position.Format(",%d", xm);
+					name = name + position;
+				}
+
+				List_out->AddTail(name);
+			}
+		}
+		CATCH(CException, e)
+		{
+			ASSERT(0);
+		}
+		END_CATCH
+	}
+
+	return 0;
+}
+
+
+int CMMSheetView::GetProperties(CStringList* List_in, CStringList* List_out)
+{
+	CString str;
+	
+	// geometry
+	CRect rec = CalcRectFromClientRowCol(GetHeaderRows(), GetHeaderCols());
+	str.Format("x_off=%d", rec.right);
+	List_out->AddTail(str);
+
+	str.Format("y_top=%d", rec.top);
+	List_out->AddTail(str);
+
+	str.Format("y_bot=%d", rec.bottom);
+	List_out->AddTail(str);
+
+	str.Format("y_mid=%d", (rec.top+rec.bottom)/2);
+	List_out->AddTail(str);
+
+	// range visible
+	
+	ROWCOL col1, col2;
+	GetColViewRange(col1, col2);
+	
+	str.Format("col_from=%d", col1);
+	List_out->AddTail(str);
+
+	str.Format("col_to=%d", col2);
+	List_out->AddTail(str);
+
+	return 0;
+}
+
+
+int CMMSheetView::GetColPoint(CStringList* List_in, CStringList* List_out)
+{	
+	ROWCOL col = atoi(List_in->GetHead());
+	BOOL scroll = List_in->GetCount()>1;
+
+	ROWCOL col1, col2;
+	GetColViewRange(col1, col2);
+
+	int x1, x2, xm;
+	GetColPos(col, col1, x1, x2, xm);
+
+	BOOL scrolled = 0;
+
+	if (col<col1 || col>col2)
+	{
+		if (scroll)
+		{
+			// scroll - cambia tutto
+			ScrollCellInView(GetHeaderRows(), col);
+			GetColPos(col, col1, x1, x2, xm);
+			scrolled = 1;
+		}
+		else
+		{
+			x1 = x2 = xm = 0;		// None
+		}
+	}
+
+	CString str;
+	
+	str.Format("%d", xm);
+	List_out->AddTail(str);
+	
+	str.Format("%d", scrolled);
+	List_out->AddTail(str);
+	
+	str.Format("%d", x1);
+	List_out->AddTail(str);			// non serve
+
+	str.Format("%d", x2);
+	List_out->AddTail(str);			// non serve
+
+	return 0;
+}
+
+
+int CMMSheetView::RobotCall_Reply(int command, CStringList *List_in, CStringList* List_out)
+{
+	int res = -1;
+
+	switch (command)
+	{
+	case ROBOT_CMD_GET_HEADER:	// GetHeader
+	{
+		res = GetHeader(List_in, List_out);
+		return res;
+	}
+	case ROBOT_CMD_GET_PROP:	// GetHeader
+	{
+		res = GetProperties(List_in, List_out);
+		return res;
+	}
+	case ROBOT_CMD_GET_COL_POINT:		// GetHeader
+	{
+		res = GetColPoint(List_in, List_out);
+		return res;
+	}
+	//case ROBOT_CMD_IS_COL_VISIBLE:	// GetHeader
+	//{
+	//	res = IsColVisible(List_out);
+	//	return res;
+	//}
+
+	default:
+		break;
+	}
+
+	return res;
+}
+
+LRESULT CMMSheetView::OnCopyData(WPARAM wParam, LPARAM lParam)							// RobotCall_Query Handler
+{
+	CString strInput;
+	int command = 0;
+	int reply_port = 0;
+
+	int res = RobotCommunication::ParseKeyword(wParam, lParam, command, reply_port, strInput);
+	if (res < 0)
+		return res;
+
+	TRACE("#### ROBOT REPLY [%d][%s]\n", command, strInput);
+
+	CStringList List_in, List_out;
+	LoadListFromPipedString(&List_in, strInput, ROBOT_SEP);
+
+	int result = RobotCall_Reply(command, &List_in, &List_out);
+
+	CString strOutput;
+	LoadPipedStringFromString(strOutput, &List_out, ROBOT_SEP);
+
+	return RobotCommunication::ReplyKeyword(result, reply_port, strOutput);
+}
+
+#pragma endregion
+
+
 //////////////////////////////////////////////////////////////////////////
 // Disable Scroll when ScrollBars are Hidden
 BOOL CMMSheetView::CanSelectCurrentCell(BOOL bSelect, ROWCOL dwSelectRow, ROWCOL dwSelectCol, ROWCOL dwOldRow, ROWCOL dwOldCol)
Index: src/Views/MMView.h
===================================================================
--- src/Views/MMView.h	(revision 11679)
+++ src/Views/MMView.h	(working copy)
@@ -402,8 +402,19 @@
 	virtual BOOL OnRButtonHitRowCol(ROWCOL nHitRow, ROWCOL nHitCol, ROWCOL nDragRow, ROWCOL nDragCol, CPoint point, UINT flags, WORD nHitState);
 	virtual BOOL OnMouseMoveOver(ROWCOL nRow, ROWCOL nCol, UINT flags, CPoint pt);
 
+	// Robot Call KeyWord
+	virtual int GetColPos(ROWCOL col, ROWCOL col_first_visible, int& x1, int& x2, int& x_mid);
+	virtual int GetColViewRange(ROWCOL &col1, ROWCOL &col2);
+
+	virtual int GetHeader(CStringList* List_in, CStringList* List_out);
+	virtual int GetProperties(CStringList* List_in, CStringList* List_out);
+	virtual int GetColPoint(CStringList* List_in, CStringList* List_out);
+	
+	virtual int RobotCall_Reply(int command, CStringList* List_in, CStringList* List_out);				// Override to serve local Page Reply
+
 // Operations
 public:
+	void Set_UIA_Attr();
 	CMMMultiDocument* GetDocument();
 
 #ifdef _DEBUG
@@ -488,7 +499,8 @@
 	afx_msg void OnUnlinkWindow();
 	afx_msg void OnUpdateUnlinkWindow(CCmdUI* pCmdUI);
 
-
+	// Robot Call KeyWord
+	afx_msg LRESULT OnCopyData(WPARAM wParam, LPARAM lParam);			// Use Protocol CopyData
 	//}}AFX_MSG
 	DECLARE_MESSAGE_MAP()
 
Index: workspace/MetaMarket160.vcxproj
===================================================================
--- workspace/MetaMarket160.vcxproj	(revision 11679)
+++ workspace/MetaMarket160.vcxproj	(working copy)
@@ -321,7 +321,7 @@
       <AdditionalOptions>/Zm200 /bigobj
  %(AdditionalOptions)</AdditionalOptions>
       <Optimization>Disabled</Optimization>
-      <AdditionalIncludeDirectories>.\;..\MMPublicInclude;..\FTCInclude;..\SOPublicInclude;..\GOVPublicInclude;..\UPInclude;..\RMPublicInclude;..\XFTPublicInclude;..\BOMPublicInclude;..\src;..\src\Common;..\src\Common\HttpRequest;..\src\Common\Zip;..\src\DataModels;..\src\Controls;..\src\CustomControls;..\src\Deprecated;..\src\Settings;..\src\Views\Order Dlg;..\src\Views\Multi Execution Order Dlg;..\src\Views\Release Multi RFQs Dlg;..\src\Views;..\src\SQL;..\src\FIXatdl;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <AdditionalIncludeDirectories>.\;..\MMPublicInclude;..\FTCInclude;..\SOPublicInclude;..\GOVPublicInclude;..\UPInclude;..\RMPublicInclude;..\XFTPublicInclude;..\BOMPublicInclude;..\src;..\src\Common;..\src\Common\HttpRequest;..\src\Common\Zip;..\src\DataModels;..\src\Controls;..\src\CustomControls;..\src\Deprecated;..\src\Settings;..\src\Views\Order Dlg;..\src\Views\Multi Execution Order Dlg;..\src\Views\Release Multi RFQs Dlg;..\src\Views;..\src\SQL;..\src\FIXatdl;C:\work\disks\D\boost_1_60_0;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
       <PreprocessorDefinitions>_OBJCHART_DLL;_DEBUG;WIN32;_WINDOWS;_AFXEXT;_EQ__FTC120;_FTC_ENABLE_DOTNET;NO_WARN_MBCS_MFC_DEPRECATION;%(PreprocessorDefinitions)</PreprocessorDefinitions>
       <BasicRuntimeChecks>Default</BasicRuntimeChecks>
       <RuntimeLibrary>MultiThreadedDebugDLL</RuntimeLibrary>
@@ -474,6 +474,7 @@
     <ClCompile Include="..\src\Common\CmdUtil.cpp" />
     <ClCompile Include="..\src\Common\MMGridHelper.cpp" />
     <ClCompile Include="..\src\Common\MMMultiExecMrkFilterMng.cpp" />
+    <ClCompile Include="..\src\Common\robot.cpp" />
     <ClCompile Include="..\src\CustomControls\MMAcceptEditRfqQuotePopup.cpp" />
     <ClCompile Include="..\src\CustomControls\MMAuctionDataCtrl.cpp" />
     <ClCompile Include="..\src\CustomControls\MMBrokerRelPercCombo.cpp" />
@@ -1013,6 +1014,7 @@
     <ClInclude Include="..\src\Common\MMMultiExecMrkFilterMng.h" />
     <ClInclude Include="..\MMPublicInclude\MMConnector.h" />
     <ClInclude Include="..\src\Common\MMTickButtonMenuUtils.h" />
+    <ClInclude Include="..\src\Common\robot.h" />
     <ClInclude Include="..\src\CustomControls\MMAcceptEditRfqQuotePopup.h" />
     <ClInclude Include="..\src\CustomControls\MMAuctionDataCtrl.h" />
     <ClInclude Include="..\src\CustomControls\MMBrokerRelPercCombo.h" />
Index: workspace/MetaMarket160.vcxproj.filters
===================================================================
--- workspace/MetaMarket160.vcxproj.filters	(revision 11679)
+++ workspace/MetaMarket160.vcxproj.filters	(working copy)
@@ -1746,6 +1746,9 @@
     <ClCompile Include="..\src\Views\MMReleaseCrossOrdersDlg.cpp">
       <Filter>Views\Care</Filter>
     </ClCompile>
+    <ClCompile Include="..\src\Common\robot.cpp">
+      <Filter>Common\Utils</Filter>
+    </ClCompile>
   </ItemGroup>
   <ItemGroup>
     <None Include="MetaMarket.def">
@@ -3202,6 +3205,9 @@
     <ClInclude Include="..\src\Views\MMReleaseCrossOrdersDlg.h">
       <Filter>Views\Care</Filter>
     </ClInclude>
+    <ClInclude Include="..\src\Common\robot.h">
+      <Filter>Common\Utils</Filter>
+    </ClInclude>
   </ItemGroup>
   <ItemGroup>
     <Image Include="res\mm_ribbon_category_large.png">
