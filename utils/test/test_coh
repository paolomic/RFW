import keyboard
import keyboard.mouse as mouse
import time

# Import Path - Assudo
import sys
from pathlib import Path
_path_import = str(Path(__file__).parent.parent)
sys.path.append(_path_import) 

from utl_app import env
import utl_win as uw
import utl_log as ul
import utl_grid as ug


############################################
#region - TODO
#    - Identificazione univoca Grid (set name o automation)
#    - PEEK ORDER   Sistemare utl_grid. move funzioni click + nRow, pulizia
#    - MOVEWIN      sistemare move_win
#    - VERS CHECK   Aggiungere Addin Versione e Check Load
#    - AUTOM_ID     handle_NewCareOrder non corrispondono nomi why?
#    - MESSAGE      COntrollare Message-Barra alle Tx
#    - CLOSE PAGE   Fare win_close_page() che controlla warning
#    - CLOSE SESS   Fare close_session - controlla warning
#    - WAIT WIN     dopo handle_start_dialog attesa retry
#    - NEW WSP      settare il new wsp - is_create
#    - NODE RELOAD  fare reload_node affidabile (serve?)
#endregion

############################################
##  Parameter
#region 

COH_PATH =          r'C:\work\disks\D\COH_x64\bin\Coherence.exe'
COH_TITLE_PATT=     "Starting Coherence"
COH_ADDIN=           ['MetaMarket','UserPages']

COH_WSP=            r"C:\work\disks\D\wsp_c\127_28000.wsp4"

COH_EXC=            'BIT'
COH_MRK=            'MTA'
COH_SEC=            'AUTOGRILL SPA'
COH_PRICE =         '95.01'
COH_QTY =           '100'
COH_ALIAS =         'KATIA'
COH_CLIENTID =      'MARI'
COH_CLIENTACC =     'TEST'

##
#COH_WSP=            r"C:\work\disks\D\wsp_c\FTX_GOV_TEQ.wsp4"
#COH_SEC=            'BCC CREDIFRIULI 1,85%16/3/25 222'
##
#endregion


def handle_start_dialog(wtop):
    edit = uw.get_child(wtop, automation_id='12429', ctrl_type='Edit', deep=3)
    print(f'edit {edit}')
    uw.edit_set(edit, COH_WSP)
    time.sleep(0.25)

    list = uw.get_child(wtop, name='Import From', ctrl_type='List', deep=3)
    print(f'list {list}')

    uw.list_check(list, '*', False)
    uw.list_check(list, COH_ADDIN, True)

    butt = uw.get_child(wtop, automation_id='1', ctrl_type='Button', deep=3)
    print(f'butt {butt}')
    is_create = butt.window_text()=='Create'
    uw.win_click(butt, wait_end=0.5)

    uw.warning_replay(wtop, 'This workspace has not been closed properly', 'No')
    return is_create

def handle_setting_init(wtop):
    butt = uw.get_child(wtop, name='Settings', ctrl_type='Button', deep=3)
    print(f'butt {butt}')
    uw.win_click(butt, wait_end=0.5)

    pane = uw.get_child(wtop, name='Settings', ctrl_type='Pane', deep=3)
    print(f'pane {pane}')

    list = uw.get_child(pane, automation_id='103', ctrl_type='List', deep=3)
    print(f'list {list}')
    uw.list_select(list, "MetaMarket")

    trace = uw.get_child(pane, name='Trace Level', ctrl_type='Custom', deep=3)
    print(f'trace {trace}')
    uw.win_click(trace, mode='combo')

    #time.sleep(.25)
    #uw.dump_uia_tree(wtop)         # non c'e' lista popup

    uw.hide_select(-1)      # detail
    keyboard.press("enter")
    time.sleep(.25)
    keyboard.press("enter")
    time.sleep(.25)

def start_connections(addins):
    for addin in addins:
        butt = select_ribbon_butt(addin, 'Auto Connect')
        if not uw.butt_is_checked(butt):
            uw.win_click(butt)

    butt = select_ribbon_butt('Home', 'Auto Connect')
    if not uw.butt_is_checked(butt):
        uw.win_click(butt)

def select_ribbon(ribb):
    rib_sel = uw.get_child(env.rib_tab, name=ribb, ctrl_type='TabItem')
    uw.win_click(rib_sel)
    toolbar = uw.get_child(env.rib_grp, name=ribb, ctrl_type='ToolBar')
    print(f'toolbar {toolbar}')
    return toolbar

def select_ribbon_butt(ribb, butt):
    toolbar = select_ribbon(ribb)
    print(f'toolbar {toolbar}')
    bt = uw.get_child(toolbar, name=butt, ctrl_type='Button', deep=2)
    print(f'bt {bt}')
    return bt

def click_ribbon_butt(ribb, butt):
    bt = select_ribbon_butt(ribb, butt)
    uw.win_click(bt)
    return bt

def handle_SecurityBrowser(wtop):
     # la pg viene generata sotto main-node coherence
    page = uw.get_child(wtop, name='Security Browser.*', ctrl_type='Pane', usere=1)
    print(f'page {page}')
    #uw.win_resize(page, 600,400)

    # punto exchenge
    treekey = f'{COH_EXC} - {COH_MRK}'
    item = uw.get_child(page, name=treekey, ctrl_type='TreeItem', deep=10) 
    uw.win_click(item)

    edit = uw.get_child(page, name='Reference:', ctrl_type='Edit', deep=10)     # POTEVO USARE -1 
    print(f'edit {edit}')
    uw.edit_set(edit, COH_SEC)

    butt = uw.get_child(page, name='Search', ctrl_type='Button', deep=10)
    uw.win_click(butt)

    status_num = uw.get_child(page, name='No. of Rows: .*', ctrl_type='Text', deep=10, usere=True)
    print(f'status_num {status_num}')
    assert status_num.window_text()=='No. of Rows: 1'       # UNIQUE 

    grid = status_num = uw.get_child(page, automation_id='59661', ctrl_type='Pane', deep=10, usere=True)
    # hide
    uw.win_click(grid, mode='grid_row1')
    mouse.click('right')
    time.sleep(0.25)

    # Il popup viene generato sotto level top - anche il sotto menu

    uw.popup_reply(wtop, 'New#Care Order')

def handle_NewCareOrder(env):
    dlg = uw.get_child(env.wtop, name="New Care Order.*", ctrl_type="Pane", usere=1)
    adv = uw.get_child(dlg, automation_id='13652', ctrl_type="CheckBox", usere=1)
    if not uw.butt_is_checked(adv):
        uw.win_click(adv)
    dlgadv = uw.get_child(dlg, name="Order Advanced Parameters", ctrl_type="Pane")

    ### Q
    edit = uw.get_child(dlg, automation_id='12216')     
    uw.edit_set(edit, COH_QTY)
    ### P
    edit = uw.get_child(dlg, automation_id='12214')     
    uw.edit_set(edit, COH_PRICE)
    
    ### ALIAS
    edit = uw.get_child(dlg, automation_id='12796')
    uw.win_click(edit)
    keyboard.write(COH_ALIAS)                               # popup is hide - or edit_set
    keyboard.press("tab")
        
    ### Note
    start_time = ul.get_now_sec()
    mytag = f'pwa_{start_time.replace(":","_")}' 
    edit = uw.get_child(dlgadv, automation_id='12954')  
    uw.edit_set(edit, mytag)

    # better close
    #dlgadv.close()
    #time.sleep(0.25)
    uw.win_close(dlgadv.handle)

    ### Buy
    but = uw.get_child(dlg, automation_id='1')          
    uw.win_click(but)

    log_path = uw.get_log_path(COH_WSP, 'MetaMarket')
    res = ul.GetLogRows(log_path, 'CLIENT_ORDER', 'ComplianceText', mytag, start_time, retry = 4, wait_s = 1)
    print (res)

    if (not res):
        raise Exception("Order not Found")
    
    return res

def handle_order(order_id):
    click_ribbon_butt('Trading', 'Orders')
    time.sleep(.5)
    page = uw.get_child(env.wtop, name='Orders.*', ctrl_type='Pane', usere=1, deep=2)
    
    edit = uw.get_child(page, name='Order ID', ctrl_type='Edit', deep=5)  
    uw.edit_set(edit, order_id)

    butt = uw.get_child(page, name='Apply', ctrl_type='Button', deep=5)  
    uw.win_click(butt)

    # Keywords: ROBOT_CMD_GET_HEADER
    grid = uw.get_child(page, automation_id='59648', usere=1, deep=5)
    response = uw.robot_send(grid.handle, uw.ROBOT_CMD_GET_HEADER, input_str="")    # input_str = 'arg1|arg2|...'
    print(f'ROBOT_CMD_GET_HEADER result: [{response}]')

######################################################
### New Session - Insert Care

def run_session():
    env.hang_app(COH_PATH, COH_TITLE_PATT, mode='hang_or_launch')

    is_create = handle_start_dialog(env.wtop)
    time.sleep(2.5)                       

    env.hang_app(COH_PATH, COH_TITLE_PATT, mode='hang')                         # need reload UIA

    #if is_create:
    #    #workspace_init(env.wtop)                                              # todo inir wsp is it is new
    #    pass

    handle_setting_init(env.wtop)                                               # works on Settings page
    
    start_connections(['MetaMarket'])                                           # Starts Connections

    if uw.statusbar_wait(env.st_bar, 'Ready', attempt=15, delay=2):             # Wait for Connection Ready
        print ('Connection Ready')
    else:
        raise Exception("Connection Fail")

    click_ribbon_butt('Trading', 'Security Browser')                            # Works on Security Browser
    handle_SecurityBrowser(env.wtop)

    res = handle_NewCareOrder(env)                                              # Insert Care Order
    handle_order(res['fields']['OrderID'])

    uw.end_ession()


######################################################
### Grid Operations Sample

def run_session_2():
    env.hang_app(COH_PATH, COH_TITLE_PATT, mode='hang')
    page = uw.get_child(env.wtop, name='Security Browser', ctrl_type='Pane', usere=0, deep=3)
    grid = uw.get_child(page, name='StingrayGrid', usere=0, deep=8)
    #print(f'page {page}, grid{grid}')

    # Esempio Get sheet info
    grid_mng = ug.create_by_win(grid)
    (x,y) = grid_mng.get_col_point('Section')
    print (x,y)

    # semepio scroll
    ug.scroll_home(grid_mng)

    # semepio sort
    ug.set_sort(grid_mng,'default')
    ug.set_sort(grid_mng, [['Section','DESC'],['Security Ref.','ASC']])

    #esempio LoaD
    ug.import_rows(grid_mng, 5, mode='page')
    
    # esempio Data Search-Use
    print (f'Collected Rows: {grid_mng.get_row_num()}')
    sel = grid_mng.search_first_match({"Security Ref.": "AV"})      # piu segmenti con , 
    print(f'Find Row: {sel}')
    print(f'Security Status {sel["Status"]}')

    uw.end_ession()


######################################################
### Test

def run_session_3(): 
    env = hang_app(COH_PATH, COH_TITLE_PATT, mode='hang_or_launch ')
    page = uw.get_child(env.wtop, name='Orders', ctrl_type='Pane', usere=0, deep=3)
    grid = uw.get_child(page, automation_id='59648', usere=1, deep=5)
    #print(f'page {page}, grid{grid}')
    grid_mng = ug.create_by_win(grid)

    uw.end_ession()
    
    
######################################################
### Main

select = 1

if (select==1):
    run_session()
if (select==2):
    run_session_2()
if (select==3):
    run_session_3()


